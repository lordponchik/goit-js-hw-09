{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASC,cAAc,yBAEnC,IAAII,EAAW,GAwBf,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAGpCJ,EAAQ,uBAAqBH,QAAiBC,OAE5CG,EAAK,sBAAoBJ,QAAeC,MAAU,GAErDA,EAAM,G,CAhCbV,EAAKC,OAAOgB,iBAAiB,UAAUC,IACrCA,EAAEC,iBACFZ,EAAW,CACT,CAACP,EAAKI,QAAQgB,MAAOC,OAAO,CAACrB,EAAKI,QAAQkB,QAC1C,CAACtB,EAAKK,OAAOe,MAAOC,OAAO,CAACrB,EAAKK,OAAOiB,QACxC,CAACtB,EAAKM,SAASc,MAAOC,OAAO,CAACrB,EAAKM,SAASgB,SAKhD,UAAuBZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,IACpC,IAAIC,EAAef,EAEnB,IAAK,IAAIgB,EAAI,EAAGA,GAAKF,EAAQE,GAAK,EAChClB,EAAckB,EAAGD,GACdE,MAAKC,GAAU9B,EAAA+B,OAAOC,QAAQF,KAC9BG,OAAMC,GAASlC,EAAA+B,OAAOI,QAAQD,KAEjCP,GAAgBF,GAiBpB,SAA0Bb,GACxBI,YAAW,KACTd,EAAKI,QAAQkB,MAAQ,GACrBtB,EAAKK,OAAOiB,MAAQ,GACpBtB,EAAKM,SAASgB,MAAQ,GACtBf,EAAW,EAAE,GACZG,E,CArBHwB,CAAiBT,EAAeF,E,CAbhCY,CAAc5B,EAAS","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector(\"input[name='delay']\"),\n  stepEl: document.querySelector(\"input[name='step']\"),\n  amountEl: document.querySelector(\"input[name='amount']\"),\n};\nlet formDate = {};\n\nrefs.formEl.addEventListener('submit', e => {\n  e.preventDefault();\n  formDate = {\n    [refs.delayEl.name]: Number([refs.delayEl.value]),\n    [refs.stepEl.name]: Number([refs.stepEl.value]),\n    [refs.amountEl.name]: Number([refs.amountEl.value]),\n  };\n  renderPromise(formDate);\n});\n\nfunction renderPromise({ delay, step, amount }) {\n  let updatedDelay = delay;\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, updatedDelay)\n      .then(result => Notify.success(result))\n      .catch(error => Notify.failure(error));\n\n    updatedDelay += step;\n  }\n  clearingFormData(updatedDelay + step);\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\nfunction clearingFormData(delay) {\n  setTimeout(() => {\n    refs.delayEl.value = '';\n    refs.stepEl.value = '';\n    refs.amountEl.value = '';\n    formDate = {};\n  }, delay);\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","delayEl","stepEl","amountEl","$47d4ff9957288465$var$formDate","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","name","Number","value","step","amount","updatedDelay","i","then","result","Notify","success","catch","error","failure","$47d4ff9957288465$var$clearingFormData","$47d4ff9957288465$var$renderPromise"],"version":3,"file":"03-promises.89aba08b.js.map"}